JAXP -> especificação java para processar arquivos xml

A grande vantagem é que um arquivo xml é semântico portanto é fácil de ser lido por seres humanos e também por programas.

xsd->XML schema definition --> Arquivo que garante a integridade do XML
-------------------------------------------------------------------
DOM

o XML é carregado na memoria em uma estrutura de arvore

Quando eu dou um Document document = builder.parse(new File("venda.xml")); o xml é carregado inteiro na memoria(isso pode ser um problema)
(ver como implementar o DOM no projeto xml_java (WorkSpace_EstudoAlura_XML))
--------------------------------------------------------------------------------------------
SAX

Utilizando o sax para efetuar o parse nos temos os beneficios de trabalhar com evento.
	casa inicio de tag/leitura de conteudo/fim de tag ele lança eventos(e nos decidimos o que fazer em cada evento), ele não deixa o arquivo inteiro na memoria.
	
Nesse capítulo aprendemos uma técnica para "parsear" arquivos chamada SAX. A principal vantagem é que para interpretar o arquivo não precisamos carregá-lo inteiro na memória, pois implementamos uma classe que vai ficar ouvindo alguns eventos como "startElement", "endElement", "caracteres" e assim por diante. A grande desvantagem é que caso precise voltar para alguma parte do documento xml não é possivel, pois o evento é disparado apenas uma vez por tag.

Quando temos um arquivo muito grande no qual apenas uma parte interessa, não faz sentido carregá-lo inteiro na memória para usar apenas um pedaço. Portanto, ficar ouvindo todos os eventos mas apenas tratar os que interessam passa a ser uma abordagem interessante, pois economiza memória, já que baseado em eventos nós decidimos o que deve permanecer nela.
(ver como implementar SAX no projeto xml_java (WorkSpace_EstudoAlura_XML))

---------------------------------------------------------------------------------------------

STAX

enquanto no SAX a própria API invoca os métodos que definimos no nosso handler, no StAX conseguimos pegar uma "lista" de todos os eventos e percorrê-los um a um. A vantagem disso é que, por ser uma "lista", é possível voltar para o evento anterior, caso necessário.
(ver como implementar STAX no projeto xml_java (WorkSpace_EstudoAlura_XML))

-------------------------------------------------------------------------------------------------

XPATH -->Consulta em um XML

O xPath nos permite selecionar apenas uma parte do nosso documento usando uma sintaxe bem parecida com a estrutura de pastas do nosso sistema operacional. O que facilita a busca de dados do nosso documento.

	XPath path = XPathFactory.newInstance().newXPath();
	XPathExpression expression = path.compile("/venda/produtos/produto[2]");
		
	NodeList produtos = (NodeList)expression.evaluate(document, XPathConstants.NODESET);

------------------------------------------------------------------------
XSLT

Arquivos XSLT são arquivos que nos ajudam a transformar arquivos xml em outros formatos como o html por exemplo o que facilita essa conversão porém não é muito utilizado atualmente no mercado, pois geralmente arquivos XSLT crescem muito rápido ficando difíceis de manter.

Arquivos XSLT podem ser úteis para quando queremos pegar todos os dados da nossa venda e mostrar no navegador para o usuário por exemplo.

------------------------------------------------------------------------------

JAXB

Nesse capítulo vimos como ler arquivos xml usando o JAX-B que é a especificação do java que nos permite associar diretamente uma classe a um arquivo xml, para isso precisamos criar uma classe que representa o nosso xml, adicionar a anotação @XmlRootElement e por fim usar a classe JAXBContext para parsear o documento.

A principal desvantagem do JAXB é que o arquivos também são interpretados usando árvores ou seja possuímos os mesmos problemas do DOM, quando o arquivo é muito grande acabamos gastando muita memória, portanto o JAXB é interessante para quando temos arquivos pequenos e vamos usar todas as informações deste arquivo.

//Serializando o xml para a classe
JAXBContext contexto = JAXBContext.newInstance(Venda.class);
Unmarshaller unmarshaller = contexto.createUnmarshaller();
Venda venda = (Venda) unmarshaller.unmarshal(new File("src/venda.xml"));